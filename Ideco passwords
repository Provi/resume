using System;
using System.Data;
using System.Windows;
using FirebirdSql.Data.FirebirdClient;
using System.Collections.ObjectModel;
using System.Windows.Controls;
using System.Windows.Documents;
using System.ComponentModel;
using System.Windows.Media;
using System.Windows.Data;
using System.Windows.Input;
using System.Runtime.InteropServices;
using System.IO;
using System.Drawing;

namespace Ideco
{
	public partial class MainWindow : Window
	{
		string select_result_1 = "";
		string select_result_2 = "";
		string select_result_3 = "";
		string select_result_4 = "";

		int maxcount = 0;
		int maxcount_for_progressbar = 0;

		NameList nl = new NameList();

		FbConnection fb;

		private GridViewColumnHeader _CurSortCol = null;
		private SortAdorner _CurAdorner = null;

		private System.Windows.Forms.NotifyIcon m_notifyIcon;

		public MainWindow()
		{
			InitializeComponent();
			TabIndexs();
			btn_Select.IsEnabled = false;
			btn_Excel.IsEnabled = false;
			Read_Config();

			m_notifyIcon = new System.Windows.Forms.NotifyIcon();
			//m_notifyIcon.BalloonTipTitle = "Зоголовок сообщения";
			m_notifyIcon.BalloonTipText = "Программа помещена в трей";
			//m_notifyIcon.Text = "Это у нас пишется если мы наведем мышку на нашу иконку в трэее";
			m_notifyIcon.Icon = new System.Drawing.Icon(@"i.ico");
			m_notifyIcon.Click += new EventHandler(m_notifyIcon_Click);
		}

		private void btn_Exit_Click(object sender, EventArgs e)
		{
			Save_Config();
			Close();
		}

		private void btn_Connect_Click(object sender, EventArgs e)
		{
			try {
				FbConnectionStringBuilder fb_con = new FbConnectionStringBuilder();
				fb_con.Charset = "WIN1251";
				fb_con.UserID = tb_Login.Text;
				fb_con.Password = tb_Pwd.Password;
				fb_con.Database = tb_PathToDB.Text;
				fb_con.ServerType = 0;

				Save_Config();

				fb = new FbConnection(fb_con.ToString());
				
				fb.Open();
				image1.Visibility = Visibility;
				btn_Select.IsEnabled = true;
				btn_Connect.IsEnabled = false;
				tb_Search.IsEnabled = true;
				}
		
			catch
			{
				MessageBox.Show("Учетные данные, подключения к базе данных, введены не верно!\n\nПример:\n\nРасположение базы данных: 192.168.0.1:/var/db/ics_main.gdb\nЛогин: SYSDBA\nПароль: 12345", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
			}
		}

		private void btn_Select_Click(object sender, EventArgs e)
		{
		try {
			maxcount = 0;

			nl.Clear();

			if (fb.State == ConnectionState.Closed)
				fb.Open();

			FbTransaction fbt = fb.BeginTransaction();

			FbCommand SelectSQL = new FbCommand("SELECT * FROM USERS WHERE IDENTIFY LIKE @FIO or LOGIN like @LOGIN", fb);
			
			SelectSQL.Parameters.Add("@FIO", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";
			SelectSQL.Parameters.Add("@LOGIN", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";

			SelectSQL.Transaction = fbt;

			FbDataReader reader = SelectSQL.ExecuteReader();

			double value = 0;
			UpdateProgressBarDelegate updatePbDelegate = new UpdateProgressBarDelegate(progressBar1.SetValue);
			Dispatcher.Invoke(updatePbDelegate, System.Windows.Threading.DispatcherPriority.Background,
							new object[] { ProgressBar.ValueProperty, value });

			try
			{
				while (reader.Read())
				{
					Decoder decoder = new Decoder();

					decoder.data = reader.GetString(5);

					decoder.Decode();

					if (decoder.data == "")
					{
						continue;
					}
					else
					{
						select_result_1 = reader.GetString(0);
						select_result_2 = reader.GetString(1) + " (" + reader.GetString(4) + ")";

						if (reader.GetString(3) == " " & reader.GetString(39) == "1" | reader.GetString(3) == "" & reader.GetString(39) == "1")
						{
							select_result_3 = reader.GetString(4) + "@" + tb_Email.Text;
						}
						else
						{
							select_result_3 = reader.GetString(3);
						}
						
						select_result_4 = decoder.data;

						maxcount += 1;

						if (select_result_2.Length >= 1)
						{
							nl.Add(new PersonName(select_result_1, select_result_2, select_result_3, select_result_4));
							listview.ItemsSource = nl;
						}
					}
				}	
			}

			finally
			{
				reader.Close();
				fb.Close();
			}
			SelectSQL.Dispose();
			btn_Excel.IsEnabled = true;
			select_result_1 = "";
			
			tb_summ_acc.Text = "Всего активных учетных записей: " + maxcount;
			maxcount_for_progressbar = maxcount;
			}
		catch
		{
		}
		}

		private void SortClick(object sender, RoutedEventArgs e)
		{
			GridViewColumnHeader column = sender as GridViewColumnHeader;
			String field = column.Tag as String;

			if (_CurSortCol != null)
			{
				AdornerLayer.GetAdornerLayer(_CurSortCol).Remove(_CurAdorner);
				listview.Items.SortDescriptions.Clear();
			}

			ListSortDirection newDir = ListSortDirection.Ascending;
			if (_CurSortCol == column && _CurAdorner.Direction == newDir)
				newDir = ListSortDirection.Descending;

			_CurSortCol = column;
			_CurAdorner = new SortAdorner(_CurSortCol, newDir);
			AdornerLayer.GetAdornerLayer(_CurSortCol).Add(_CurAdorner);
			listview.Items.SortDescriptions.Add(new SortDescription(field, newDir));
		}

		private delegate void UpdateProgressBarDelegate(
				System.Windows.DependencyProperty dp, Object value);

		private void btn_Excel_Click(object sender, RoutedEventArgs e)
		{
		try
			{
			btn_Select.IsEnabled = false;

			Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
			app.Visible = false;
			Microsoft.Office.Interop.Excel.Workbook wb = app.Workbooks.Add(1);
			Microsoft.Office.Interop.Excel.Worksheet ws = (Microsoft.Office.Interop.Excel.Worksheet)wb.Worksheets[1];

			

			if (fb.State == ConnectionState.Closed)
				fb.Open();

			FbTransaction fbt = fb.BeginTransaction();

			FbCommand SelectSQL = new FbCommand("SELECT * FROM USERS WHERE IDENTIFY LIKE @FIO OR LOGIN like @LOGIN OR ID like @ID OR EMAIL like @EMAIL", fb);

			SelectSQL.Parameters.Add("@FIO", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";
			SelectSQL.Parameters.Add("@LOGIN", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";
			SelectSQL.Parameters.Add("@ID", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";
			SelectSQL.Parameters.Add("@EMAIL", SqlDbType.VarChar).Value = "%" + tb_Search.Text + "%";
			
			SelectSQL.Transaction = fbt;

			FbDataReader reader = SelectSQL.ExecuteReader();

			ws.Cells.Font.Bold = true;

			progressBar1.Visibility = Visibility;

			double value = 0;

			progressBar1.Minimum = 0;
			progressBar1.Maximum = maxcount_for_progressbar;
			progressBar1.Value = 0;

			UpdateProgressBarDelegate updatePbDelegate = new UpdateProgressBarDelegate(progressBar1.SetValue);

			Dispatcher.Invoke(updatePbDelegate, System.Windows.Threading.DispatcherPriority.Background,
							new object[] { ProgressBar.ValueProperty, value });

			try
			{
				int y = 2;

				ws.Cells[y, 1].ColumnWidth = 5;
				ws.Cells[y, 2].ColumnWidth = 5;
				ws.Cells[y, 3].ColumnWidth = 50;
				ws.Cells[y, 4].ColumnWidth = 25;
				ws.Cells[y, 5].ColumnWidth = 15;

				while (reader.Read())
				{
					Decoder decoder = new Decoder();

					decoder.data = reader.GetString(5);

					decoder.Decode();

					

					if (decoder.data == "")
					{
						continue;
					}
					else
					{
						value += 1;

						Dispatcher.Invoke(updatePbDelegate, System.Windows.Threading.DispatcherPriority.Background,
							new object[] { ProgressBar.ValueProperty, value });

						ws.Cells[y, 1] = value;
						ws.Cells[y, 2] = reader.GetString(0);
						ws.Cells[y, 3] = reader.GetString(1) + " (" + reader.GetString(4) + ")";
						if (reader.GetString(3) == " " & reader.GetString(39) == "1" | reader.GetString(3) == "" & reader.GetString(39) == "1")
						{
							select_result_3 = reader.GetString(4) + "@" + tb_Email.Text;
							ws.Cells[y, 4] = select_result_3;
						}
						else
						{
							select_result_3 = reader.GetString(3);
							ws.Cells[y, 4] = select_result_3;
						}
						ws.Cells[y, 5] = decoder.data;

						dynamic rgHeader = ws.Range[ws.Cells[1, 1], ws.Cells[1, 3]];

						ws.Cells[1, 1] = "№";
						ws.Cells[1, 2] = "Id";
						ws.Cells[1, 3] = "ФИО (логин)";
						ws.Cells[1, 4] = "E-Mail";
						ws.Cells[1, 5] = "Пароль";
						
						y++;
					}
				}
				Marshal.ReleaseComObject(wb);
				GC.GetTotalMemory(true);
			}
						
			finally
			{
				reader.Close();
				fb.Close();
				app.Visible = true;
				maxcount = 0;
				value = 0;
			}
			SelectSQL.Dispose();
			progressBar1.Visibility = Visibility.Hidden;
			btn_Select.IsEnabled = true;
		}
		catch
		{
		}
		}

		private void button1_Click_1(object sender, RoutedEventArgs e)
		{
			About about = new About();
			about.ShowDialog();
		}

		private void TabIndexs()
		{
			tb_PathToDB.TabIndex = 1;
			tb_Login.TabIndex = 2;
			tb_Pwd.TabIndex = 3;
			btn_Connect.TabIndex = 4;
			tb_Search.TabIndex = 5;
			btn_Select.TabIndex = 6;
			btn_Excel.TabIndex = 7;
			btn_Exit.TabIndex = 8;

		}

		private void tb_Pwd_KeyDown(object sender, KeyEventArgs e)
		{
			if (image1.Visibility == Visibility)
			{
			}
			else if (e.Key == Key.Enter)
			{
				btn_Connect_Click(new object(), new EventArgs());
			}
		}

		private void tb_Login_KeyDown(object sender, KeyEventArgs e)
		{
			if (image1.Visibility == Visibility)
			{
			}
			else if (e.Key == Key.Enter)
			{
				btn_Connect_Click(new object(), new EventArgs());
			}
		}

		private void tb_PathToDB_KeyDown(object sender, KeyEventArgs e)
		{
			if (image1.Visibility == Visibility)
			{
			}
			else if (e.Key == Key.Enter)
			{
				btn_Connect_Click(new object(), new EventArgs());
			}
		}

		private void tb_Search_KeyDown(object sender, KeyEventArgs e)
		{
		try
			{
				if (image1.Visibility == Visibility.Hidden)
				{
				}
				else if (e.Key == Key.Enter)
				{
					btn_Select_Click(new object(), new EventArgs());
				}
			}
			catch
			{}
		}

		private void logo_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
		{
			About about = new About();
			about.ShowDialog();
		}

		private void Save_Config()
		{
		try
		{
			if (checkBox1.IsChecked == true & checkBox2.IsChecked == false)
			{
				string[] lines = { tb_PathToDB.Text, "" };
				File.WriteAllLines(@"Settings.cfg", lines);
			}
			else if (checkBox1.IsChecked == true & checkBox2.IsChecked == true)
			{
				string[] lines = { tb_PathToDB.Text, tb_Login.Text };
				File.WriteAllLines(@"Settings.cfg", lines);
			}
			else if (checkBox2.IsChecked == true & checkBox1.IsChecked == false)
			{
				string[] lines = { "", tb_Login.Text };
				File.WriteAllLines(@"Settings.cfg", lines);
			}
			else
			{
				string[] lines = { "", "" };
				File.WriteAllLines(@"Settings.cfg", lines);
			}


			if (checkBox1.IsChecked == true & checkBox2.IsChecked == false)
			{
				string[] lines = { "+", "-" };
				File.WriteAllLines(@"Check.cfg", lines);
			}
			else if (checkBox1.IsChecked == true & checkBox2.IsChecked == true)
			{
				string[] lines = { "+", "+" };
				File.WriteAllLines(@"Check.cfg", lines);
			}
			else if (checkBox2.IsChecked == true & checkBox1.IsChecked == false)
			{
				string[] lines = { "-", "+" };
				File.WriteAllLines(@"Check.cfg", lines);
			}
			else
			{
				string[] lines = { "-", "-" };
				File.WriteAllLines(@"Check.cfg", lines);
			}

			{
				string[] lines = { tb_Email.Text };
				File.WriteAllLines(@"Email.cfg", lines);
			}
			}
			catch {}
		}

		private void Read_Config()
		{
		try
		{
			string[] lines = File.ReadAllLines(@"Settings.cfg");
			if (lines[0] == "" & lines[1] == "")
			{
				tb_PathToDB.Text = "";
				tb_Login.Text = "";
			}
			else
			{
				tb_PathToDB.Text = lines[0];
				tb_Login.Text = lines[1];
			}

			string[] liness = File.ReadAllLines(@"Check.cfg");
			if (liness[0] == "-" & liness[1] == "-")
			{
				checkBox1.IsChecked = false;
				checkBox2.IsChecked = false;
			}
			else if (liness[0] == "+" & liness[1] == "+")
			{
				checkBox1.IsChecked = IsEnabled;
				checkBox2.IsChecked = IsEnabled;
			}
			else if (liness[0] == "+" & liness[1] == "-")
			{
				checkBox1.IsChecked = true;
				checkBox2.IsChecked = false;
			}
			else if (liness[0] == "-" & liness[1] == "+")
			{
				checkBox1.IsChecked = false;
				checkBox2.IsChecked = true;
			}

			string[] linesss = File.ReadAllLines(@"Email.cfg");
			{
				tb_Email.Text = linesss[0];
			}
			}
			catch{}
		}

		private WindowState m_storedWindowState = WindowState.Normal;
		void OnStateChanged(object sender, EventArgs args)
		{
			if (WindowState == WindowState.Minimized)
			{
				Hide();
			}
			else
				m_storedWindowState = WindowState;
		}
		void OnIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs args)
		{
			CheckTrayIcon();
		}

		void m_notifyIcon_Click(object sender, EventArgs e)
		{
			Show();
			WindowState = m_storedWindowState;
		}
		void CheckTrayIcon()
		{
			ShowTrayIcon(!IsVisible);
		}

		void ShowTrayIcon(bool show)
		{
			if (m_notifyIcon != null)
			    m_notifyIcon.Visible = show;
		}

		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			m_notifyIcon.Dispose();
			m_notifyIcon = null;
		}

	}

	public class NameList : ObservableCollection<PersonName>
	{
		public NameList()
		{

		}
	}

	public class PersonName
	{
		private string id;
		private string fio;
		private string mail;
		private string pass;

		public PersonName(string _id, string _fio, string _mail, string _pass)
		{
			this.id = _id;
			this.fio = _fio;
			this.mail = _mail;
			this.pass = _pass;
		}

		public string ID
		{
			get { return id; }
			set { id = value; }
		}

		public string FIO
		{
			get { return fio; }
			set { fio = value; }
		}

		public string MAIL
		{
			get { return mail; }
			set { mail = value; }
		}

		public string PASS
		{
			get { return pass; }
			set { pass = value; }
		}
	}

	public class SortAdorner : Adorner
	{
		private readonly static Geometry _AscGeometry = Geometry.Parse("M 0,0 L 10,0 L 5,5 Z");
		private readonly static Geometry _DescGeometry = Geometry.Parse("M 0,5 L 10,5 L 5,0 Z");

		public ListSortDirection Direction { get; private set; }

		public SortAdorner(UIElement element, ListSortDirection dir)
			: base(element)
		{ Direction = dir; }

		protected override void OnRender(DrawingContext drawingContext)
		{
			base.OnRender(drawingContext);

			if (AdornedElement.RenderSize.Width < 20)
				return;

			drawingContext.PushTransform(new TranslateTransform(AdornedElement.RenderSize.Width - 15,
				  (AdornedElement.RenderSize.Height - 5) / 2));

			drawingContext.DrawGeometry(System.Windows.Media.Brushes.Black, null, Direction == ListSortDirection.Ascending ? _AscGeometry : _DescGeometry);

			drawingContext.Pop();
		}
	}

	public class BoolToVisibilityConverter : IValueConverter
	{
		public object Convert(object value, Type targetType,
		  object parameter, System.Globalization.CultureInfo culture)
		{
			bool param = bool.Parse(parameter as string);
			bool val = (bool)value;

			return val == param ?
			  Visibility.Visible : Visibility.Hidden;
		}

		public object ConvertBack(object value, Type targetType,
		  object parameter, System.Globalization.CultureInfo culture)
		{
			throw new NotImplementedException();
		}
	}
}
